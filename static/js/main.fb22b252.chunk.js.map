{"version":3,"sources":["components/Charts/Charts.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","images/image.png","App.js","index.js","App.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","death","url","fetchData","country","a","changeableUrl","axios","fetchDailyData","get","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","image","src","coronaImage","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb22b252.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__3wBKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__D7XId\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__27Z9U\",\"card\":\"Cards_card__2sTha\",\"infected\":\"Cards_infected__OVbGD\",\"recovered\":\"Cards_recovered__24PWv\",\"death\":\"Cards_death__1AiBa\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from 'react-countup'; // This is for having the number of stats count (move)\r\nimport cx from \"classnames\";//Used to add multiple classes for styling the components\r\n\r\nconst Cards = ({data : {confirmed,recovered,deaths,lastUpdate}}) => {\r\n\r\n    if(!confirmed){\r\n        return 'Loading!...';\r\n    }\r\n    console.log(lastUpdate);\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\">\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card,styles.infected)}> {/*Resposiveness through xs and md*/}\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>{/*From confirmed object we need to take the value*/}\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of active cases of Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of recoveries from Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.death)}>\r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom>Death</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value}\r\n                                duration={2.5}\r\n                                separator=\",\"\r\n                            />\r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant=\"body2\">Number of death caused by Covid-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n\r\n    try{ //Excecuted if data is succesfully fetched \r\n        /*const {data}  = await axios.get(url);//Stroing the datat recieved in an object\r\n\r\n        const modifiedData = { //object\r\n            confirmed:data.confirmed,\r\n            recovered:data.recovered,\r\n            deaths:data.deaths,\r\n            lastUpdate:data.lastUpdate,\r\n        }or */ \r\n        const {data:{confirmed,recovered,deaths,lastUpdate}} = await axios(changeableUrl);\r\n\r\n        return {confirmed,recovered,deaths,lastUpdate}; // To App.js\r\n    } catch(error){\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n        const {data}  = await axios.get(`${url}/daily`);\r\n        return data.map((dailyData) => ({ confirmed: dailyData.confirmed.total,deaths: dailyData.deaths.total, date:dailyData.reportDate, }));\r\n    }catch(error){\r\n        return error;\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try{\r\n        const {data:{countries}}  = await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);\r\n    }catch(error){\r\n        return error;\r\n    }\r\n}\r\n\r\n//export default fetchData(); does not work","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from \"../../api\";\r\nimport {Line,Bar} from \"react-chartjs-2\";//chart.js is installed\r\nimport styles from \"./Charts.module.css\";\r\n//Data is being sent from index.js from fetchDailyData() function\r\nconst Charts = ({data,country}) => {\r\n    const [dailyData,setDailyData] = useState([]); //Empty [] array  value as initial value because dailyData is also array\r\n\r\n    useEffect(()=>{\r\n        const fetchAPI = async() =>{\r\n            setDailyData(await fetchDailyData());\r\n        }\r\n        fetchAPI();\r\n    },[]); //Empty array  is very important ,it stops the api calls \r\n\r\n    const lineChart = (\r\n        dailyData.length\r\n        ? (\r\n          <Line\r\n            data={{\r\n              labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString()),\r\n              datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true,\r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n                    fill: true,\r\n                }], \r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n\r\n      const barChart = (\r\n        data.confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [data.confirmed.value, data.recovered.value, data.deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n    \r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Charts;\r\n","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\nimport {fetchCountries} from \"../../api\";\r\nimport styles from \"./CountryPicker.module.css\";\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n    const [fetchedCountries,setFetchedCountries] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchAPI = async ()=>{\r\n            setFetchedCountries(await fetchCountries());\r\n        }\r\n        fetchAPI();\r\n    },[setFetchedCountries]);\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                <option value=\"\">Global</option>\r\n                {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}{/*populates the search bar*/}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React from 'react';\r\n\r\n/*import Cards from \"./components/Cards/Cards\";\r\nimport Charts from \"./components/Charts/Charts\";\r\nimport CountryPicker from \"./components/CountryPicker/CountryPicker\";*/\r\n\r\nimport {Cards,Charts,CountryPicker} from \"./components\";//To use this you need to have one index.js file in components folder\r\nimport styles from \"./App.module.css\";\r\nimport {fetchData} from \"./api\";\r\n\r\nimport coronaImage from \"./images/image.png\";\r\n\r\nclass App extends React.Component{\r\n\r\n    state = {\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n    handleCountryChange = async (country) =>{\r\n        //fetch the data\r\n        const fetchedData = await fetchData(country);\r\n        //set the state\r\n        this.setState({data:fetchedData,country:country});\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n        //console.log(data); // We coudl have also done this in index.js file ,but we sent the data recieved to App.js\r\n        this.setState({data:fetchedData});\r\n    }\r\n    render(){\r\n       \r\n        return (\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage}/>\r\n                <Cards data = {this.state.data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Charts data ={this.state.data} country = {this.state.country}/>\r\n             \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App/>,document.getElementById('root'));","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__i8WKp\",\"image\":\"App_image__2uhki\"};"],"sourceRoot":""}